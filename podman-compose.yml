version: '3.8'

networks:
  purchase-order-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  postgresql:
    image: docker.io/postgres:17-alpine
    container_name: purchase-order-postgres
    environment:
      POSTGRES_DB: habib_ali_machpud
      POSTGRES_USER: po_user
      POSTGRES_PASSWORD: qz0I81Z!
      TZ: UTC
      PGTZ: UTC
    ports:
      - "5432:5432"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: >
      postgres -c timezone=UTC
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_timezone=UTC
      -c log_min_messages=WARNING
      -c log_min_error_statement=ERROR
    networks:
      purchase-order-network:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U po_user -d habib_ali_machpud"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis:
    image: docker.io/redis:7.2.5-alpine
    container_name: purchase-order-redis
    environment:
      TZ: UTC
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --timeout 0
      --tcp-keepalive 300
      --databases 16
      --logfile ""
      --syslog-enabled no
    networks:
      purchase-order-network:
        ipv4_address: 172.20.0.20
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  grafana:
    image: docker.io/grafana/grafana:12.2
    container_name: purchase-order-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_USERS_ALLOW_ORG_CREATE: 'false'
      GF_USERS_AUTO_ASSIGN_ORG: 'true'
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: 'Viewer'
      GF_SERVER_DOMAIN: localhost
      GF_SERVER_HTTP_PORT: 3000
      GF_SERVER_PROTOCOL: http
      GF_SERVER_ROOT_URL: http://localhost:3000/
      GF_DATABASE_TYPE: sqlite3
      GF_DATABASE_PATH: /var/lib/grafana/grafana.db
      GF_SESSION_PROVIDER: memory
      GF_ANALYTICS_REPORTING_ENABLED: 'false'
      GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
      GF_SECURITY_DISABLE_GRAVATAR: 'true'
      GF_SECURITY_COOKIE_SECURE: 'false'
      GF_SECURITY_COOKIE_SAMESITE: 'lax'
      GF_SNAPSHOTS_EXTERNAL_ENABLED: 'false'
      GF_ALERTING_ENABLED: 'true'
      GF_EXPLORE_ENABLED: 'true'
      GF_METRICS_ENABLED: 'true'
      GF_LOG_MODE: console
      GF_LOG_LEVEL: info
      TZ: UTC
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      purchase-order-network:
        ipv4_address: 172.20.0.30
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    depends_on:
      postgresql:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp